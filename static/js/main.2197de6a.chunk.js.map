{"version":3,"sources":["assets/phl_hec_all_confirmed.csv","components/histogram/index.js","components/axisSelector/index.js","components/plotGraph/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Histogram","props","data","value","axis","react_default","a","createElement","className","width","document","querySelector","clientWidth","margin","svg","d3","concat","attr","dataArr","map","obj","x","domain","nice","range","bins","thresholds","ticks","y","d","length","selectAll","remove","append","call","g","tickSizeOuter","enter","x0","Math","max","x1","renderHistogram","AxisSelector","options","columns","title","label","react_select_esm","onChange","e","update","components_histogram","PlotGraph","xSelector","ySelector","body","renderPlotGraph","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","updateAxisSelection","setState","state","_this2","filteredColumns","csvData","row","keys","forEach","column","test","trim","parseFloat","then","result","_this$state","components_axisSelector","components_plotGraph","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2197de6a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/phl_hec_all_confirmed.567291ba.csv\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport * as d3 from 'd3'; \n\nimport './histogram.sass'\n\nconst Histogram = (props) => {\n  const { data, value, axis } = props\n  const renderHistogram = () => {\n    // CSS data for D3\n    const height = 100\n    const width = document.querySelector('.Histogram') ? \n    document.querySelector('.Histogram').clientWidth * .9 : 250\n    const margin = ({top: 20, right: 20, bottom: 30, left: 40})\n\n    // D3 template\n    const svg = d3.select(`.Histogram__Svg--${axis}`).attr('width', width).attr('height', height)\n\n    // Filtered Data array for histogram\n    const dataArr = data.map(obj => obj[value])\n\n    // X-axis Linear Scale\n    const x = d3.scaleLinear()\n      .domain(d3.extent(dataArr)).nice()\n      .range([margin.left, width - margin.right])\n    \n    const bins = d3.histogram()\n      .domain(x.domain())\n      .thresholds(x.ticks(20))(dataArr)\n\n    // Y-axis Linear Scale\n    const y = d3.scaleLinear()\n      .domain([0, d3.max(bins, d => d.length)]).nice()\n      .range([height - margin.bottom, margin.top])\n    \n    // X-axis Positioning\n    const xAxis = g => g\n      .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n      .call(d3.axisBottom(x).tickSizeOuter(0))\n\n    // Append d3 data to DOM\n    svg.selectAll(\"g\").remove()\n    svg.append(\"g\")\n      .call(xAxis);\n    svg.append(\"g\")\n        .attr(\"fill\", \"steelblue\")\n      .selectAll(\"rect\")\n      .data(bins)\n      .enter().append(\"rect\")\n        .attr(\"x\", d => x(d.x0) + 1)\n        .attr(\"width\", d => Math.max(0, x(d.x1) - x(d.x0) - 1))\n        .attr(\"y\", d => y(d.length))\n        .attr(\"height\", d => y(0) - y(d.length));\n  }\n\n  return (\n    <div className=\"Histogram\">\n      {renderHistogram()}\n      <svg className={\"Histogram__Svg--\"+axis} />\n    </div>\n  )\n}\n\nHistogram.propTypes = {\n  axis: PropTypes.string,\n  value: PropTypes.string,\n  data: PropTypes.array,\n};\n\nexport default Histogram;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Select from 'react-select';\n\nimport Histogram from '../histogram'\nimport './axisSelector.sass';\n\nconst AxisSelector = (props) => {\n  const options = props.columns.map(title => ({\n    value: title,\n    label: title\n  }))\n\n  return (\n    <div className=\"AxisSelector\">\n      <h4>{props.title}</h4>\n      <Select \n        className=\"AxisSelector__Dropdown\"\n        value={{label: props.value}}\n        options={options}\n        onChange={(e) => props.update(e,props.axis)}\n      />\n      <div className={\"AxisSelector__\" + props.axis + \"Histogram AxisSelector__Histogram\"} />\n      <Histogram axis={props.axis} value={props.value} data={props.data} />\n    </div>\n  )\n}\n\nAxisSelector.propTypes = {\n  title: PropTypes.string,\n  axis: PropTypes.string,\n  update: PropTypes.func,\n  columns: PropTypes.array,\n  value: PropTypes.string\n};\n\nexport default AxisSelector;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport * as d3 from 'd3'; \n\nimport './plotGraph.sass'\n\nconst PlotGraph = (props) => {\n  const renderPlotGraph = () => {\n    const { data, xSelector, ySelector } = props\n\n    // CSS data for D3\n    const height = 300\n    const width = document.body.clientWidth * .95\n    const margin = ({top: 20, right: 30, bottom: 30, left: 40})\n\n    // Append SVG to target\n    const svg = d3.select(\".PlotGraph__Svg\").attr(\"width\", width).attr(\"height\", height);\n\n\n    // x-axis linear scale\n    const x = d3.scaleLinear()\n      .domain(d3.extent(data, d => d[xSelector]))\n      .range([margin.left, width - margin.right])\n    \n    // y-axis linear scale\n    const y = d3.scaleLinear()\n      .domain(d3.extent(data, d => d[ySelector])).nice()\n      .range([height - margin.bottom, margin.top])\n    \n    // X-axis positioning\n    const xAxis = g => g\n      .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n      .call(d3.axisBottom(x))\n    \n    // Y-axis positioning\n    const yAxis = g => g\n      .attr(\"transform\", `translate(${margin.left},0)`)\n      .call(d3.axisLeft(y))\n\n    // Append d3 data to DOM\n    svg.selectAll(\"g\").remove()\n    svg.append(\"g\").call(xAxis);\n    svg.append(\"g\").call(yAxis);\n    svg.append(\"g\")\n        .attr(\"stroke\", \"steelblue\")\n        .attr(\"stroke-width\", 1.5)\n        .attr(\"fill\", \"none\")\n      .selectAll(\"circle\")\n      .data(data)\n      .enter().append(\"circle\")\n        .attr(\"cx\", d => x(d[xSelector]))\n        .attr(\"cy\", d => y(d[ySelector]))\n        .attr(\"r\", 2);\n  }\n\n  return (\n    <div className=\"PlotGraph\">\n      {renderPlotGraph()}\n      <svg className=\"PlotGraph__Svg\" />\n    </div>\n  )\n}\n\nPlotGraph.propTypes = {\n  data: PropTypes.array,\n  xSelector: PropTypes.string,\n  ySelector: PropTypes.string\n};\n\nexport default PlotGraph;\n","import React, { Component } from 'react';\nimport * as d3 from 'd3';\n\nimport AxisSelector from './components/axisSelector';\nimport PlotGraph from './components/plotGraph';\n\nimport csvData from './assets/phl_hec_all_confirmed.csv';\nimport './App.sass';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      xSelector: '',\n      ySelector: '',\n      columns: [],\n      data: []\n    };\n  }\n\n  componentWillMount() {\n    const filteredColumns = {}\n\n    // Load and Parse CSV data\n    d3.csv(csvData, (row) => {\n      const keys = Object.keys(row)\n      keys.forEach(column => {\n\n        // Checks string with characters and spaces\n        if (/^[ a-z]+$/i.test(row[column])) {\n          row[column] = row[column].trim()\n        } else \n        // Checks string with numbers and exponentials, including spaces\n        if (/^[ -+.0-9e-]+$/.test(row[column])) {\n          row[column] = parseFloat(row[column])\n          filteredColumns[column] = true\n        }\n      })\n      return row\n    }).then(result => {\n      this.setState({\n        columns: Object.keys(filteredColumns),\n        data: result,\n        xSelector: result.columns[32],\n        ySelector: result.columns[11]\n      })\n    })\n  }\n\n  updateAxisSelection = (e, axis) => {\n    if (axis === 'x') this.setState({ xSelector: e.value })\n    if (axis === 'y') this.setState({ ySelector: e.value })\n  }\n  \n  render() {\n    const { data, columns, xSelector, ySelector } = this.state\n    return (\n      <div className=\"App\">\n        <h1>Exoplanet Data Explorer</h1>\n        <div className=\"App__AxisSelectionContainer\">\n          <AxisSelector columns={columns} update={this.updateAxisSelection} axis='x' title='X-Axis' value={xSelector} data={data} />\n          <AxisSelector columns={columns} update={this.updateAxisSelection} axis='y' title='Y-Axis' value={ySelector} data={data} />\n        </div>\n        <div className=\"App__MainContent\">\n          <h3 className=\"App__GraphTitle\">\n            {this.state.xSelector} vs {this.state.ySelector}\n          </h3>\n          <PlotGraph data={data} xSelector={xSelector} ySelector={ySelector} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}